#Forest Regressor for Optimization Recommendation
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

file_path = '/content/Output.xlsx'
df = pd.read_excel(file_path)

num_rows = df.shape[0]
np.random.seed(42)

df['Domain Authority'] = np.random.randint(20, 101, size=num_rows)
df['Conversion Rate (%)'] = np.random.uniform(1, 5, size=num_rows)

X = df[['Traffic (Monthly)', 'Bounce Rate (%)', 'Avg Session Duration (min)',
         'Page Load Time (sec)', 'Mobile Friendliness Score', 'Backlinks',
         'Domain Authority']]
y = df['Conversion Rate (%)']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

df['Predicted Conversion Rate'] = model.predict(X)

threshold = df['Conversion Rate (%)'].mean()

df['Recommendation'] = df.apply(lambda row: "Optimize content" if row['Predicted Conversion Rate'] < threshold else "Keep current strategy", axis=1)

output_file = '/content/Updated_Output.xlsx'
df.to_excel(output_file, index=False)

print(f"Updated data saved to {output_file}")

plt.figure(figsize=(10, 6))
sns.scatterplot(x=df['Conversion Rate (%)'], y=df['Predicted Conversion Rate'])
plt.xlabel('Actual Conversion Rate (%)')
plt.ylabel('Predicted Conversion Rate (%)')
plt.title('Actual vs Predicted Conversion Rates')
plt.grid()
plt.show()
